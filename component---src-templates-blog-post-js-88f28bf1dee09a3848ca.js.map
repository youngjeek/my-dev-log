{"version":3,"file":"component---src-templates-blog-post-js-88f28bf1dee09a3848ca.js","mappings":"wQAEA,MAAMA,E,QAAMC,GAAAA,IAAU,mQAahBC,EAAW,QAAC,SAAEC,EAAQ,SAAEC,GAAU,SACtC,0BACGD,EAASE,KAAIC,GACZ,sBAAIC,IAAKD,EAAQE,GAAIC,UAAWH,EAAQE,KAAOJ,EAAW,SAAW,IACnE,qBACEM,KAAI,IAAMJ,EAAQE,GAClBG,QAASC,IACPA,EAAEC,iBACFC,SAASC,cAAc,IAAIT,EAAQE,IAAMQ,eAAe,CACtDC,SAAU,UACV,GAGHX,EAAQY,OAEVZ,EAAQa,MAAMC,OAAS,GACtB,0BACGd,EAAQa,MAAMd,KAAIgB,GACjB,sBACEd,IAAKc,EAAMb,GACXC,UAAWY,EAAMb,KAAOJ,EAAW,SAAW,IAE9C,qBACEM,KAAI,IAAMW,EAAMb,GAChBG,QAASC,IACPA,EAAEC,iBACFC,SAASC,cAAc,IAAIM,EAAMb,IAAMQ,eAAe,CACpDC,SAAU,UACV,GAGHI,EAAMH,cAQlB,EAsBDI,EAAoBC,IACxB,MAAMC,EAAiB,GAevB,OAbAD,EAAgBE,SAAQ,CAACnB,EAASoB,KAChC,MAAQC,UAAWT,EAAK,GAAEV,GAAOF,EAER,OAArBA,EAAQsB,SACVJ,EAAeK,KAAK,CAAErB,KAAIU,QAAOC,MAAO,KACV,OAArBb,EAAQsB,UAAqBJ,EAAeJ,OAAS,GAC9DI,EAAeA,EAAeJ,OAAS,GAAGD,MAAMU,KAAK,CACnDrB,KACAU,SAEJ,IAGKM,CAAc,EA4DvB,MAXwB,KACtB,MAAM,EAACpB,EAAS,EAAC0B,IAAeC,EAAAA,EAAAA,aAC1B,eAAEP,GAnFc,MACtB,MAAOA,EAAgBQ,GAAqBC,EAAAA,SAAe,IAY3D,OAVAA,EAAAA,WAAgB,KACd,MAAMV,EAAkBW,MAAMC,KAC5BrB,SAASsB,iBAAiB,qBAItBC,EAAoBf,EAAkBC,GAC5CS,EAAkBK,EAAkB,GACnC,IAEI,CAAEb,iBAAgB,EAsEEc,GAC3B,OACE,gBAACtC,EAAG,CAAC,aAAW,qBAAmB,eAEjC,gBAACE,EAAQ,CAACC,SAAUqB,EAAgBpB,SAAUA,IAC1C,EC5IV,MA0DamC,EAAO,IAAyC,IAAtCC,MAAQC,eAAgBC,IAAQ,EACrD,OACE,gBAAC,IAAG,CACFxB,MAAOwB,EAAKC,YAAYzB,MACxB0B,YAAaF,EAAKC,YAAYC,aAAeF,EAAKG,SAClD,EAIN,MAnEyB,IAGlB,IAAD,MAFJL,MAAM,SAAEM,EAAQ,KAAEC,EAAI,KAAEC,EAAMP,eAAgBC,GAAM,SACpDO,GACD,EACC,MAAMC,GAA6B,QAAjB,EAAAF,EAAKG,oBAAY,aAAjB,EAAmBjC,QAAK,QAE1C,OACE,gBAAC,IAAM,CAAC+B,SAAUA,EAAU/B,MAAOgC,GACjC,2BACEzC,UAAU,YACV2C,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYZ,EAAKC,YAAYzB,OAC1C,yBAAIwB,EAAKC,YAAYY,OAEvB,2BACEC,wBAAyB,CAAEC,OAAQf,EAAKgB,MACxCJ,SAAS,gBAEX,2BACA,gBAAC,EAAe,MAChB,4CAEE,gBAAC,IAAG,QAGR,uBAAK7C,UAAU,iBACb,sBACEkD,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGlB,GACC,gBAAC,EAAAmB,KAAI,CAACC,GAAIpB,EAASqB,OAAOC,KAAMC,IAAI,QAAM,KACrCvB,EAASH,YAAYzB,QAI9B,0BACG6B,GACC,gBAAC,EAAAkB,KAAI,CAACC,GAAInB,EAAKoB,OAAOC,KAAMC,IAAI,QAC7BtB,EAAKJ,YAAYzB,MAAK,SAM1B,C","sources":["webpack://gatsby-starter-blog/./src/components/tableOfContents.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["import styled from \"styled-components\"\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nconst TOC = styled.nav`\r\n  position: sticky;\r\n  position: -webkit-sticky; /* For Safari */\r\n  top: 24px; /* How far down the page you want your ToC to live */\r\n\r\n  /* Give table of contents a scrollbar */\r\n  max-height: calc(100vh - 40px);\r\n  overflow: auto;\r\n`\r\n/**\r\n * This renders an item in the table of contents list.\r\n * scrollIntoView is used to ensure that when a user clicks on an item, it will smoothly scroll.\r\n */\r\nconst Headings = ({ headings, activeId }) => (\r\n  <ul>\r\n    {headings.map(heading => (\r\n      <li key={heading.id} className={heading.id === activeId ? \"active\" : \"\"}>\r\n        <a\r\n          href={`#${heading.id}`}\r\n          onClick={e => {\r\n            e.preventDefault()\r\n            document.querySelector(`#${heading.id}`).scrollIntoView({\r\n              behavior: \"smooth\",\r\n            })\r\n          }}\r\n        >\r\n          {heading.title}\r\n        </a>\r\n        {heading.items.length > 0 && (\r\n          <ul>\r\n            {heading.items.map(child => (\r\n              <li\r\n                key={child.id}\r\n                className={child.id === activeId ? \"active\" : \"\"}\r\n              >\r\n                <a\r\n                  href={`#${child.id}`}\r\n                  onClick={e => {\r\n                    e.preventDefault()\r\n                    document.querySelector(`#${child.id}`).scrollIntoView({\r\n                      behavior: \"smooth\",\r\n                    })\r\n                  }}\r\n                >\r\n                  {child.title}\r\n                </a>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </li>\r\n    ))}\r\n  </ul>\r\n)\r\n\r\n/**\r\n * Dynamically generates the table of contents list, using any H2s and H3s it can find in the main text\r\n */\r\nconst useHeadingsData = () => {\r\n  const [nestedHeadings, setNestedHeadings] = React.useState([])\r\n\r\n  React.useEffect(() => {\r\n    const headingElements = Array.from(\r\n      document.querySelectorAll(\"main h2, main h3\")\r\n    )\r\n\r\n    // Created a list of headings, with H3s nested\r\n    const newNestedHeadings = getNestedHeadings(headingElements)\r\n    setNestedHeadings(newNestedHeadings)\r\n  }, [])\r\n\r\n  return { nestedHeadings }\r\n}\r\n\r\nconst getNestedHeadings = headingElements => {\r\n  const nestedHeadings = []\r\n\r\n  headingElements.forEach((heading, index) => {\r\n    const { innerText: title, id } = heading\r\n\r\n    if (heading.nodeName === \"H2\") {\r\n      nestedHeadings.push({ id, title, items: [] })\r\n    } else if (heading.nodeName === \"H3\" && nestedHeadings.length > 0) {\r\n      nestedHeadings[nestedHeadings.length - 1].items.push({\r\n        id,\r\n        title,\r\n      })\r\n    }\r\n  })\r\n\r\n  return nestedHeadings\r\n}\r\n\r\nconst useIntersectionObserver = setActiveId => {\r\n  const headingElementsRef = React.useRef({})\r\n  React.useEffect(() => {\r\n    const callback = headings => {\r\n      headingElementsRef.current = headings.reduce((map, headingElement) => {\r\n        map[headingElement.target.id] = headingElement\r\n        return map\r\n      }, headingElementsRef.current)\r\n\r\n      // Get all headings that are currently visible on the page\r\n      const visibleHeadings = []\r\n      Object.keys(headingElementsRef.current).forEach(key => {\r\n        const headingElement = headingElementsRef.current[key]\r\n        if (headingElement.isIntersecting) visibleHeadings.push(headingElement)\r\n      })\r\n\r\n      const getIndexFromId = id =>\r\n        headingElements.findIndex(heading => heading.id === id)\r\n\r\n      // If there is only one visible heading, this is our \"active\" heading\r\n      if (visibleHeadings.length === 1) {\r\n        setActiveId(visibleHeadings[0].target.id)\r\n        // If there is more than one visible heading,\r\n        // choose the one that is closest to the top of the page\r\n      } else if (visibleHeadings.length > 1) {\r\n        const sortedVisibleHeadings = visibleHeadings.sort(\r\n          (a, b) => getIndexFromId(a.target.id) > getIndexFromId(b.target.id)\r\n        )\r\n\r\n        setActiveId(sortedVisibleHeadings[0].target.id)\r\n      }\r\n    }\r\n\r\n    const observer = new IntersectionObserver(callback, {\r\n      root: document.querySelector(\"iframe\"),\r\n      rootMargin: \"500px\",\r\n    })\r\n\r\n    const headingElements = Array.from(document.querySelectorAll(\"h2, h3\"))\r\n\r\n    headingElements.forEach(element => observer.observe(element))\r\n\r\n    return () => observer.disconnect()\r\n  }, [setActiveId])\r\n}\r\n\r\nconst TableOfContents = () => {\r\n  const [activeId, setActiveId] = useState()\r\n  const { nestedHeadings } = useHeadingsData()\r\n  return (\r\n    <TOC aria-label=\"Table of contents\">\r\n      Hello world!\r\n      <Headings headings={nestedHeadings} activeId={activeId} />\r\n    </TOC>\r\n  )\r\n}\r\n\r\nexport default TableOfContents\r\n","import * as React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Bio from \"../components/bio\"\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\nimport TableOfContents from \"../components/tableOfContents\"\r\n\r\nconst BlogPostTemplate = ({\r\n  data: { previous, next, site, markdownRemark: post },\r\n  location,\r\n}) => {\r\n  const siteTitle = site.siteMetadata?.title || `Title`\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <article\r\n        className=\"blog-post\"\r\n        itemScope\r\n        itemType=\"http://schema.org/Article\"\r\n      >\r\n        <header>\r\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\r\n          <p>{post.frontmatter.date}</p>\r\n        </header>\r\n        <section\r\n          dangerouslySetInnerHTML={{ __html: post.html }}\r\n          itemProp=\"articleBody\"\r\n        />\r\n        <hr />\r\n        <TableOfContents />\r\n        <footer>\r\n          comments...\r\n          <Bio />\r\n        </footer>\r\n      </article>\r\n      <nav className=\"blog-post-nav\">\r\n        <ul\r\n          style={{\r\n            display: `flex`,\r\n            flexWrap: `wrap`,\r\n            justifyContent: `space-between`,\r\n            listStyle: `none`,\r\n            padding: 0,\r\n          }}\r\n        >\r\n          <li>\r\n            {previous && (\r\n              <Link to={previous.fields.slug} rel=\"prev\">\r\n                ← {previous.frontmatter.title}\r\n              </Link>\r\n            )}\r\n          </li>\r\n          <li>\r\n            {next && (\r\n              <Link to={next.fields.slug} rel=\"next\">\r\n                {next.frontmatter.title} →\r\n              </Link>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const Head = ({ data: { markdownRemark: post } }) => {\r\n  return (\r\n    <Seo\r\n      title={post.frontmatter.title}\r\n      description={post.frontmatter.description || post.excerpt}\r\n    />\r\n  )\r\n}\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug(\r\n    $id: String!\r\n    $previousPostId: String\r\n    $nextPostId: String\r\n  ) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    markdownRemark(id: { eq: $id }) {\r\n      id\r\n      excerpt(pruneLength: 160)\r\n      html\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        description\r\n        tags\r\n      }\r\n    }\r\n    previous: markdownRemark(id: { eq: $previousPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n    next: markdownRemark(id: { eq: $nextPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["TOC","styled","Headings","headings","activeId","map","heading","key","id","className","href","onClick","e","preventDefault","document","querySelector","scrollIntoView","behavior","title","items","length","child","getNestedHeadings","headingElements","nestedHeadings","forEach","index","innerText","nodeName","push","setActiveId","useState","setNestedHeadings","React","Array","from","querySelectorAll","newNestedHeadings","useHeadingsData","Head","data","markdownRemark","post","frontmatter","description","excerpt","previous","next","site","location","siteTitle","siteMetadata","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}